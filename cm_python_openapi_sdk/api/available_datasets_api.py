# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from cm_python_openapi_sdk.models.available_datasets_request import AvailableDatasetsRequest
from cm_python_openapi_sdk.models.available_datasets_response import AvailableDatasetsResponse

from cm_python_openapi_sdk.api_client import ApiClient, RequestSerialized
from cm_python_openapi_sdk.api_response import ApiResponse
from cm_python_openapi_sdk.rest import RESTResponseType


class AvailableDatasetsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def available_datasets(
        self,
        project_id: Annotated[str, Field(strict=True, description="Id of the project")],
        dwh_cluster_id: Annotated[str, Field(strict=True, description="Id of the dwh cluster")],
        available_datasets_request: AvailableDatasetsRequest,
        type: Annotated[Optional[StrictStr], Field(description="If the parameter present, only the datasets of given type(s) are returned. Parameter can be repeated.")] = None,
        subtype: Annotated[Optional[StrictStr], Field(description="If the parameter present, only the dwh datasets of given subtype(s) are returned. Parameter can be repeated, e.g. `?subtype=geometryLine&subtype=geometryPolygon`  If a parameter `type=dwh` is present then a subtype parameter is ignored and all subtypes of dwh datasets are returned. ")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Expand datasets to minimalize roundtrips.")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="Specify the dataset foreign key to limit list of available datasets. This allows to find just datasets from one date dimension. Alterantively, you can specify the model subtree by setting a primary key of dataset. In this case, only the dataset specified by it's primary key and the connected datasets will be returned. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AvailableDatasetsResponse:
        """available_datasets

        Finds list of datasets available as granularity for given metric(s).  The project's data model defines the relations among datasets. Not all metrics are computable at all datasets granularity. E.g. population defined on state level cannot be calculated for granularity (dataset) city.  This endpoint checks the relations from data model and lists only the available datasets for the metrics. 

        :param project_id: Id of the project (required)
        :type project_id: str
        :param dwh_cluster_id: Id of the dwh cluster (required)
        :type dwh_cluster_id: str
        :param available_datasets_request: (required)
        :type available_datasets_request: AvailableDatasetsRequest
        :param type: If the parameter present, only the datasets of given type(s) are returned. Parameter can be repeated.
        :type type: str
        :param subtype: If the parameter present, only the dwh datasets of given subtype(s) are returned. Parameter can be repeated, e.g. `?subtype=geometryLine&subtype=geometryPolygon`  If a parameter `type=dwh` is present then a subtype parameter is ignored and all subtypes of dwh datasets are returned. 
        :type subtype: str
        :param expand: Expand datasets to minimalize roundtrips.
        :type expand: str
        :param var_from: Specify the dataset foreign key to limit list of available datasets. This allows to find just datasets from one date dimension. Alterantively, you can specify the model subtree by setting a primary key of dataset. In this case, only the dataset specified by it's primary key and the connected datasets will be returned. 
        :type var_from: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._available_datasets_serialize(
            project_id=project_id,
            dwh_cluster_id=dwh_cluster_id,
            available_datasets_request=available_datasets_request,
            type=type,
            subtype=subtype,
            expand=expand,
            var_from=var_from,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableDatasetsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def available_datasets_with_http_info(
        self,
        project_id: Annotated[str, Field(strict=True, description="Id of the project")],
        dwh_cluster_id: Annotated[str, Field(strict=True, description="Id of the dwh cluster")],
        available_datasets_request: AvailableDatasetsRequest,
        type: Annotated[Optional[StrictStr], Field(description="If the parameter present, only the datasets of given type(s) are returned. Parameter can be repeated.")] = None,
        subtype: Annotated[Optional[StrictStr], Field(description="If the parameter present, only the dwh datasets of given subtype(s) are returned. Parameter can be repeated, e.g. `?subtype=geometryLine&subtype=geometryPolygon`  If a parameter `type=dwh` is present then a subtype parameter is ignored and all subtypes of dwh datasets are returned. ")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Expand datasets to minimalize roundtrips.")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="Specify the dataset foreign key to limit list of available datasets. This allows to find just datasets from one date dimension. Alterantively, you can specify the model subtree by setting a primary key of dataset. In this case, only the dataset specified by it's primary key and the connected datasets will be returned. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AvailableDatasetsResponse]:
        """available_datasets

        Finds list of datasets available as granularity for given metric(s).  The project's data model defines the relations among datasets. Not all metrics are computable at all datasets granularity. E.g. population defined on state level cannot be calculated for granularity (dataset) city.  This endpoint checks the relations from data model and lists only the available datasets for the metrics. 

        :param project_id: Id of the project (required)
        :type project_id: str
        :param dwh_cluster_id: Id of the dwh cluster (required)
        :type dwh_cluster_id: str
        :param available_datasets_request: (required)
        :type available_datasets_request: AvailableDatasetsRequest
        :param type: If the parameter present, only the datasets of given type(s) are returned. Parameter can be repeated.
        :type type: str
        :param subtype: If the parameter present, only the dwh datasets of given subtype(s) are returned. Parameter can be repeated, e.g. `?subtype=geometryLine&subtype=geometryPolygon`  If a parameter `type=dwh` is present then a subtype parameter is ignored and all subtypes of dwh datasets are returned. 
        :type subtype: str
        :param expand: Expand datasets to minimalize roundtrips.
        :type expand: str
        :param var_from: Specify the dataset foreign key to limit list of available datasets. This allows to find just datasets from one date dimension. Alterantively, you can specify the model subtree by setting a primary key of dataset. In this case, only the dataset specified by it's primary key and the connected datasets will be returned. 
        :type var_from: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._available_datasets_serialize(
            project_id=project_id,
            dwh_cluster_id=dwh_cluster_id,
            available_datasets_request=available_datasets_request,
            type=type,
            subtype=subtype,
            expand=expand,
            var_from=var_from,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableDatasetsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def available_datasets_without_preload_content(
        self,
        project_id: Annotated[str, Field(strict=True, description="Id of the project")],
        dwh_cluster_id: Annotated[str, Field(strict=True, description="Id of the dwh cluster")],
        available_datasets_request: AvailableDatasetsRequest,
        type: Annotated[Optional[StrictStr], Field(description="If the parameter present, only the datasets of given type(s) are returned. Parameter can be repeated.")] = None,
        subtype: Annotated[Optional[StrictStr], Field(description="If the parameter present, only the dwh datasets of given subtype(s) are returned. Parameter can be repeated, e.g. `?subtype=geometryLine&subtype=geometryPolygon`  If a parameter `type=dwh` is present then a subtype parameter is ignored and all subtypes of dwh datasets are returned. ")] = None,
        expand: Annotated[Optional[StrictStr], Field(description="Expand datasets to minimalize roundtrips.")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="Specify the dataset foreign key to limit list of available datasets. This allows to find just datasets from one date dimension. Alterantively, you can specify the model subtree by setting a primary key of dataset. In this case, only the dataset specified by it's primary key and the connected datasets will be returned. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """available_datasets

        Finds list of datasets available as granularity for given metric(s).  The project's data model defines the relations among datasets. Not all metrics are computable at all datasets granularity. E.g. population defined on state level cannot be calculated for granularity (dataset) city.  This endpoint checks the relations from data model and lists only the available datasets for the metrics. 

        :param project_id: Id of the project (required)
        :type project_id: str
        :param dwh_cluster_id: Id of the dwh cluster (required)
        :type dwh_cluster_id: str
        :param available_datasets_request: (required)
        :type available_datasets_request: AvailableDatasetsRequest
        :param type: If the parameter present, only the datasets of given type(s) are returned. Parameter can be repeated.
        :type type: str
        :param subtype: If the parameter present, only the dwh datasets of given subtype(s) are returned. Parameter can be repeated, e.g. `?subtype=geometryLine&subtype=geometryPolygon`  If a parameter `type=dwh` is present then a subtype parameter is ignored and all subtypes of dwh datasets are returned. 
        :type subtype: str
        :param expand: Expand datasets to minimalize roundtrips.
        :type expand: str
        :param var_from: Specify the dataset foreign key to limit list of available datasets. This allows to find just datasets from one date dimension. Alterantively, you can specify the model subtree by setting a primary key of dataset. In this case, only the dataset specified by it's primary key and the connected datasets will be returned. 
        :type var_from: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._available_datasets_serialize(
            project_id=project_id,
            dwh_cluster_id=dwh_cluster_id,
            available_datasets_request=available_datasets_request,
            type=type,
            subtype=subtype,
            expand=expand,
            var_from=var_from,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AvailableDatasetsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _available_datasets_serialize(
        self,
        project_id,
        dwh_cluster_id,
        available_datasets_request,
        type,
        subtype,
        expand,
        var_from,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['projectId'] = project_id
        if dwh_cluster_id is not None:
            _path_params['dwhClusterId'] = dwh_cluster_id
        # process the query parameters
        if type is not None:
            
            _query_params.append(('type', type))
            
        if subtype is not None:
            
            _query_params.append(('subtype', subtype))
            
        if expand is not None:
            
            _query_params.append(('expand', expand))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if available_datasets_request is not None:
            _body_params = available_datasets_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/projects/{projectId}/dwh/{dwhClusterId}/availableDatasets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


