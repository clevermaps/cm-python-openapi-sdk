# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from cm_python_openapi_sdk.models.search_query_response import SearchQueryResponse

from cm_python_openapi_sdk.api_client import ApiClient, RequestSerialized
from cm_python_openapi_sdk.api_response import ApiResponse
from cm_python_openapi_sdk.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def full_text_search(
        self,
        project_id: Annotated[str, Field(strict=True, description="Id of the project")],
        query: Annotated[StrictStr, Field(description="Query search phrase. It is split into terms and the resource return dataset's object that contains all terms in their `title` or `subtitle`.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of the page")] = None,
        size: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The count of records to return for one page")] = None,
        dataset: Annotated[Optional[StrictStr], Field(description="Search only in given dataset. If the parameter present, only the search results of given datasets are returned. Parameter can be repeated, e.g. `&dataset=orders&dataset=customers`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchQueryResponse:
        """Full text search on all internal project data.

        Full text search on all internal project data. The search service indexes title and subtitle of all geometry datasets (`geometryPoint`, `geometryLine`, `geometryPolygon`).  The dataset is indexed during dataset `pull job`. It means that if the `title` or `subtitle` definition is changed in dataset's metadata definition, the affected dataset must be fully loaded again. 

        :param project_id: Id of the project (required)
        :type project_id: str
        :param query: Query search phrase. It is split into terms and the resource return dataset's object that contains all terms in their `title` or `subtitle`. (required)
        :type query: str
        :param page: Number of the page
        :type page: int
        :param size: The count of records to return for one page
        :type size: int
        :param dataset: Search only in given dataset. If the parameter present, only the search results of given datasets are returned. Parameter can be repeated, e.g. `&dataset=orders&dataset=customers`
        :type dataset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._full_text_search_serialize(
            project_id=project_id,
            query=query,
            page=page,
            size=size,
            dataset=dataset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchQueryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def full_text_search_with_http_info(
        self,
        project_id: Annotated[str, Field(strict=True, description="Id of the project")],
        query: Annotated[StrictStr, Field(description="Query search phrase. It is split into terms and the resource return dataset's object that contains all terms in their `title` or `subtitle`.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of the page")] = None,
        size: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The count of records to return for one page")] = None,
        dataset: Annotated[Optional[StrictStr], Field(description="Search only in given dataset. If the parameter present, only the search results of given datasets are returned. Parameter can be repeated, e.g. `&dataset=orders&dataset=customers`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchQueryResponse]:
        """Full text search on all internal project data.

        Full text search on all internal project data. The search service indexes title and subtitle of all geometry datasets (`geometryPoint`, `geometryLine`, `geometryPolygon`).  The dataset is indexed during dataset `pull job`. It means that if the `title` or `subtitle` definition is changed in dataset's metadata definition, the affected dataset must be fully loaded again. 

        :param project_id: Id of the project (required)
        :type project_id: str
        :param query: Query search phrase. It is split into terms and the resource return dataset's object that contains all terms in their `title` or `subtitle`. (required)
        :type query: str
        :param page: Number of the page
        :type page: int
        :param size: The count of records to return for one page
        :type size: int
        :param dataset: Search only in given dataset. If the parameter present, only the search results of given datasets are returned. Parameter can be repeated, e.g. `&dataset=orders&dataset=customers`
        :type dataset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._full_text_search_serialize(
            project_id=project_id,
            query=query,
            page=page,
            size=size,
            dataset=dataset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchQueryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def full_text_search_without_preload_content(
        self,
        project_id: Annotated[str, Field(strict=True, description="Id of the project")],
        query: Annotated[StrictStr, Field(description="Query search phrase. It is split into terms and the resource return dataset's object that contains all terms in their `title` or `subtitle`.")],
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of the page")] = None,
        size: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The count of records to return for one page")] = None,
        dataset: Annotated[Optional[StrictStr], Field(description="Search only in given dataset. If the parameter present, only the search results of given datasets are returned. Parameter can be repeated, e.g. `&dataset=orders&dataset=customers`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Full text search on all internal project data.

        Full text search on all internal project data. The search service indexes title and subtitle of all geometry datasets (`geometryPoint`, `geometryLine`, `geometryPolygon`).  The dataset is indexed during dataset `pull job`. It means that if the `title` or `subtitle` definition is changed in dataset's metadata definition, the affected dataset must be fully loaded again. 

        :param project_id: Id of the project (required)
        :type project_id: str
        :param query: Query search phrase. It is split into terms and the resource return dataset's object that contains all terms in their `title` or `subtitle`. (required)
        :type query: str
        :param page: Number of the page
        :type page: int
        :param size: The count of records to return for one page
        :type size: int
        :param dataset: Search only in given dataset. If the parameter present, only the search results of given datasets are returned. Parameter can be repeated, e.g. `&dataset=orders&dataset=customers`
        :type dataset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._full_text_search_serialize(
            project_id=project_id,
            query=query,
            page=page,
            size=size,
            dataset=dataset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchQueryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _full_text_search_serialize(
        self,
        project_id,
        query,
        page,
        size,
        dataset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['projectId'] = project_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if dataset is not None:
            
            _query_params.append(('dataset', dataset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/projects/{projectId}/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


