# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from cm_python_openapi_sdk.models.isochrone_paged_model_dto import IsochronePagedModelDTO

from cm_python_openapi_sdk.api_client import ApiClient, RequestSerialized
from cm_python_openapi_sdk.api_response import ApiResponse
from cm_python_openapi_sdk.rest import RESTResponseType


class IsochroneApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_isochrone(
        self,
        lat: Annotated[StrictStr, Field(description="Latitude of the isochrone starting location. Accepts multiple values split by comma.")],
        lng: Annotated[StrictStr, Field(description="Longitude of the isochrone starting location. Accepts multiple values split by comma.")],
        profile: Annotated[StrictStr, Field(description="Profiles of the isochrone, available types: car, bike, foot, air. Accepts multiple values split by comma.")],
        unit: Annotated[StrictStr, Field(description="Unit of the isochrone result, available types: time (for car, bike and foot profiles) or distance (for air profile). Accepts multiple values split by comma.")],
        amount: Annotated[StrictStr, Field(description="The amount of either time (minutes for car, bike and foot profiles) or distance (meters for air profile). Accepts multiple values split by comma.")],
        size: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The count of records to return for one page")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of the page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IsochronePagedModelDTO:
        """Get isochrone

        Calculates a list of isochrones for the given point(s). An **isochrone** is a line that connects points of equal travel time around a given location. It can be calculated as:  - **Travel Time-Based Isochrone**: Represents the area reachable within a specified amount of time.   Supported for the following travel modes:   - `car`   - `bike`   - `foot`  - **Distance-Based Isochrone**: Represents a circular area defined by a specified distance (in meters) from a point.   Supported for the `air` travel mode.  Endpoint accepts multiple points split by comma. For each point you must also define profile, unit and amount, split by comma. E.g. for two points - profile=foot,car unit=time,time amount=5.20 

        :param lat: Latitude of the isochrone starting location. Accepts multiple values split by comma. (required)
        :type lat: str
        :param lng: Longitude of the isochrone starting location. Accepts multiple values split by comma. (required)
        :type lng: str
        :param profile: Profiles of the isochrone, available types: car, bike, foot, air. Accepts multiple values split by comma. (required)
        :type profile: str
        :param unit: Unit of the isochrone result, available types: time (for car, bike and foot profiles) or distance (for air profile). Accepts multiple values split by comma. (required)
        :type unit: str
        :param amount: The amount of either time (minutes for car, bike and foot profiles) or distance (meters for air profile). Accepts multiple values split by comma. (required)
        :type amount: str
        :param size: The count of records to return for one page
        :type size: int
        :param page: Number of the page
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_isochrone_serialize(
            lat=lat,
            lng=lng,
            profile=profile,
            unit=unit,
            amount=amount,
            size=size,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IsochronePagedModelDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_isochrone_with_http_info(
        self,
        lat: Annotated[StrictStr, Field(description="Latitude of the isochrone starting location. Accepts multiple values split by comma.")],
        lng: Annotated[StrictStr, Field(description="Longitude of the isochrone starting location. Accepts multiple values split by comma.")],
        profile: Annotated[StrictStr, Field(description="Profiles of the isochrone, available types: car, bike, foot, air. Accepts multiple values split by comma.")],
        unit: Annotated[StrictStr, Field(description="Unit of the isochrone result, available types: time (for car, bike and foot profiles) or distance (for air profile). Accepts multiple values split by comma.")],
        amount: Annotated[StrictStr, Field(description="The amount of either time (minutes for car, bike and foot profiles) or distance (meters for air profile). Accepts multiple values split by comma.")],
        size: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The count of records to return for one page")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of the page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IsochronePagedModelDTO]:
        """Get isochrone

        Calculates a list of isochrones for the given point(s). An **isochrone** is a line that connects points of equal travel time around a given location. It can be calculated as:  - **Travel Time-Based Isochrone**: Represents the area reachable within a specified amount of time.   Supported for the following travel modes:   - `car`   - `bike`   - `foot`  - **Distance-Based Isochrone**: Represents a circular area defined by a specified distance (in meters) from a point.   Supported for the `air` travel mode.  Endpoint accepts multiple points split by comma. For each point you must also define profile, unit and amount, split by comma. E.g. for two points - profile=foot,car unit=time,time amount=5.20 

        :param lat: Latitude of the isochrone starting location. Accepts multiple values split by comma. (required)
        :type lat: str
        :param lng: Longitude of the isochrone starting location. Accepts multiple values split by comma. (required)
        :type lng: str
        :param profile: Profiles of the isochrone, available types: car, bike, foot, air. Accepts multiple values split by comma. (required)
        :type profile: str
        :param unit: Unit of the isochrone result, available types: time (for car, bike and foot profiles) or distance (for air profile). Accepts multiple values split by comma. (required)
        :type unit: str
        :param amount: The amount of either time (minutes for car, bike and foot profiles) or distance (meters for air profile). Accepts multiple values split by comma. (required)
        :type amount: str
        :param size: The count of records to return for one page
        :type size: int
        :param page: Number of the page
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_isochrone_serialize(
            lat=lat,
            lng=lng,
            profile=profile,
            unit=unit,
            amount=amount,
            size=size,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IsochronePagedModelDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_isochrone_without_preload_content(
        self,
        lat: Annotated[StrictStr, Field(description="Latitude of the isochrone starting location. Accepts multiple values split by comma.")],
        lng: Annotated[StrictStr, Field(description="Longitude of the isochrone starting location. Accepts multiple values split by comma.")],
        profile: Annotated[StrictStr, Field(description="Profiles of the isochrone, available types: car, bike, foot, air. Accepts multiple values split by comma.")],
        unit: Annotated[StrictStr, Field(description="Unit of the isochrone result, available types: time (for car, bike and foot profiles) or distance (for air profile). Accepts multiple values split by comma.")],
        amount: Annotated[StrictStr, Field(description="The amount of either time (minutes for car, bike and foot profiles) or distance (meters for air profile). Accepts multiple values split by comma.")],
        size: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The count of records to return for one page")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of the page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get isochrone

        Calculates a list of isochrones for the given point(s). An **isochrone** is a line that connects points of equal travel time around a given location. It can be calculated as:  - **Travel Time-Based Isochrone**: Represents the area reachable within a specified amount of time.   Supported for the following travel modes:   - `car`   - `bike`   - `foot`  - **Distance-Based Isochrone**: Represents a circular area defined by a specified distance (in meters) from a point.   Supported for the `air` travel mode.  Endpoint accepts multiple points split by comma. For each point you must also define profile, unit and amount, split by comma. E.g. for two points - profile=foot,car unit=time,time amount=5.20 

        :param lat: Latitude of the isochrone starting location. Accepts multiple values split by comma. (required)
        :type lat: str
        :param lng: Longitude of the isochrone starting location. Accepts multiple values split by comma. (required)
        :type lng: str
        :param profile: Profiles of the isochrone, available types: car, bike, foot, air. Accepts multiple values split by comma. (required)
        :type profile: str
        :param unit: Unit of the isochrone result, available types: time (for car, bike and foot profiles) or distance (for air profile). Accepts multiple values split by comma. (required)
        :type unit: str
        :param amount: The amount of either time (minutes for car, bike and foot profiles) or distance (meters for air profile). Accepts multiple values split by comma. (required)
        :type amount: str
        :param size: The count of records to return for one page
        :type size: int
        :param page: Number of the page
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_isochrone_serialize(
            lat=lat,
            lng=lng,
            profile=profile,
            unit=unit,
            amount=amount,
            size=size,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IsochronePagedModelDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_isochrone_serialize(
        self,
        lat,
        lng,
        profile,
        unit,
        amount,
        size,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lng is not None:
            
            _query_params.append(('lng', lng))
            
        if profile is not None:
            
            _query_params.append(('profile', profile))
            
        if unit is not None:
            
            _query_params.append(('unit', unit))
            
        if amount is not None:
            
            _query_params.append(('amount', amount))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/isochrone',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


