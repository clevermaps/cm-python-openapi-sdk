# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from cm_python_openapi_sdk.models.audit_log_paged_resource import AuditLogPagedResource
from cm_python_openapi_sdk.models.audit_log_single_resource import AuditLogSingleResource

from cm_python_openapi_sdk.api_client import ApiClient, RequestSerialized
from cm_python_openapi_sdk.api_response import ApiResponse
from cm_python_openapi_sdk.rest import RESTResponseType


class AuditLogApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_audit_log_event(
        self,
        event_id: Annotated[str, Field(strict=True, description="Event ID")],
        project_id: Annotated[str, Field(strict=True, description="Id of the project, used as query parameter")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AuditLogSingleResource:
        """Get audit log event by eventId

        Get audit log event by event ID for project.  **Security:** Resource return only audit log events for those projects where the authenticated user is Admin. 

        :param event_id: Event ID (required)
        :type event_id: str
        :param project_id: Id of the project, used as query parameter (required)
        :type project_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_audit_log_event_serialize(
            event_id=event_id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuditLogSingleResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_audit_log_event_with_http_info(
        self,
        event_id: Annotated[str, Field(strict=True, description="Event ID")],
        project_id: Annotated[str, Field(strict=True, description="Id of the project, used as query parameter")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AuditLogSingleResource]:
        """Get audit log event by eventId

        Get audit log event by event ID for project.  **Security:** Resource return only audit log events for those projects where the authenticated user is Admin. 

        :param event_id: Event ID (required)
        :type event_id: str
        :param project_id: Id of the project, used as query parameter (required)
        :type project_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_audit_log_event_serialize(
            event_id=event_id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuditLogSingleResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_audit_log_event_without_preload_content(
        self,
        event_id: Annotated[str, Field(strict=True, description="Event ID")],
        project_id: Annotated[str, Field(strict=True, description="Id of the project, used as query parameter")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get audit log event by eventId

        Get audit log event by event ID for project.  **Security:** Resource return only audit log events for those projects where the authenticated user is Admin. 

        :param event_id: Event ID (required)
        :type event_id: str
        :param project_id: Id of the project, used as query parameter (required)
        :type project_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_audit_log_event_serialize(
            event_id=event_id,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuditLogSingleResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_audit_log_event_serialize(
        self,
        event_id,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if event_id is not None:
            _path_params['eventId'] = event_id
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('projectId', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/auditlog/{eventId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_audit_logs(
        self,
        project_id: Annotated[str, Field(strict=True, description="Id of the project, used as query parameter")],
        account_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Id of the account, used in query parameters")] = None,
        event_types: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Event type")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="Timestamp lower bound (UTC timestamp format)")] = None,
        to: Annotated[Optional[StrictStr], Field(description="Timestamp upper bound (UTC timestamp format)")] = None,
        last_evaluated_event_id: Annotated[Optional[StrictStr], Field(description="Last evaluated event ID when requesting next page")] = None,
        last_evaluated_timestamp: Annotated[Optional[StrictStr], Field(description="Last evaluated timestamp when requesting next page (UTC timestamp format)")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="page size")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Sort direction")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AuditLogPagedResource:
        """Get audit logs for project

        Get audit logs for project  **Security:** Resource return only audit log for those projects where the authenticated user is Admin. 

        :param project_id: Id of the project, used as query parameter (required)
        :type project_id: str
        :param account_id: Id of the account, used in query parameters
        :type account_id: str
        :param event_types: Event type
        :type event_types: str
        :param var_from: Timestamp lower bound (UTC timestamp format)
        :type var_from: str
        :param to: Timestamp upper bound (UTC timestamp format)
        :type to: str
        :param last_evaluated_event_id: Last evaluated event ID when requesting next page
        :type last_evaluated_event_id: str
        :param last_evaluated_timestamp: Last evaluated timestamp when requesting next page (UTC timestamp format)
        :type last_evaluated_timestamp: str
        :param page_size: page size
        :type page_size: int
        :param sort_direction: Sort direction
        :type sort_direction: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_audit_logs_serialize(
            project_id=project_id,
            account_id=account_id,
            event_types=event_types,
            var_from=var_from,
            to=to,
            last_evaluated_event_id=last_evaluated_event_id,
            last_evaluated_timestamp=last_evaluated_timestamp,
            page_size=page_size,
            sort_direction=sort_direction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuditLogPagedResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_audit_logs_with_http_info(
        self,
        project_id: Annotated[str, Field(strict=True, description="Id of the project, used as query parameter")],
        account_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Id of the account, used in query parameters")] = None,
        event_types: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Event type")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="Timestamp lower bound (UTC timestamp format)")] = None,
        to: Annotated[Optional[StrictStr], Field(description="Timestamp upper bound (UTC timestamp format)")] = None,
        last_evaluated_event_id: Annotated[Optional[StrictStr], Field(description="Last evaluated event ID when requesting next page")] = None,
        last_evaluated_timestamp: Annotated[Optional[StrictStr], Field(description="Last evaluated timestamp when requesting next page (UTC timestamp format)")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="page size")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Sort direction")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AuditLogPagedResource]:
        """Get audit logs for project

        Get audit logs for project  **Security:** Resource return only audit log for those projects where the authenticated user is Admin. 

        :param project_id: Id of the project, used as query parameter (required)
        :type project_id: str
        :param account_id: Id of the account, used in query parameters
        :type account_id: str
        :param event_types: Event type
        :type event_types: str
        :param var_from: Timestamp lower bound (UTC timestamp format)
        :type var_from: str
        :param to: Timestamp upper bound (UTC timestamp format)
        :type to: str
        :param last_evaluated_event_id: Last evaluated event ID when requesting next page
        :type last_evaluated_event_id: str
        :param last_evaluated_timestamp: Last evaluated timestamp when requesting next page (UTC timestamp format)
        :type last_evaluated_timestamp: str
        :param page_size: page size
        :type page_size: int
        :param sort_direction: Sort direction
        :type sort_direction: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_audit_logs_serialize(
            project_id=project_id,
            account_id=account_id,
            event_types=event_types,
            var_from=var_from,
            to=to,
            last_evaluated_event_id=last_evaluated_event_id,
            last_evaluated_timestamp=last_evaluated_timestamp,
            page_size=page_size,
            sort_direction=sort_direction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuditLogPagedResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_audit_logs_without_preload_content(
        self,
        project_id: Annotated[str, Field(strict=True, description="Id of the project, used as query parameter")],
        account_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Id of the account, used in query parameters")] = None,
        event_types: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Event type")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="Timestamp lower bound (UTC timestamp format)")] = None,
        to: Annotated[Optional[StrictStr], Field(description="Timestamp upper bound (UTC timestamp format)")] = None,
        last_evaluated_event_id: Annotated[Optional[StrictStr], Field(description="Last evaluated event ID when requesting next page")] = None,
        last_evaluated_timestamp: Annotated[Optional[StrictStr], Field(description="Last evaluated timestamp when requesting next page (UTC timestamp format)")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="page size")] = None,
        sort_direction: Annotated[Optional[StrictStr], Field(description="Sort direction")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get audit logs for project

        Get audit logs for project  **Security:** Resource return only audit log for those projects where the authenticated user is Admin. 

        :param project_id: Id of the project, used as query parameter (required)
        :type project_id: str
        :param account_id: Id of the account, used in query parameters
        :type account_id: str
        :param event_types: Event type
        :type event_types: str
        :param var_from: Timestamp lower bound (UTC timestamp format)
        :type var_from: str
        :param to: Timestamp upper bound (UTC timestamp format)
        :type to: str
        :param last_evaluated_event_id: Last evaluated event ID when requesting next page
        :type last_evaluated_event_id: str
        :param last_evaluated_timestamp: Last evaluated timestamp when requesting next page (UTC timestamp format)
        :type last_evaluated_timestamp: str
        :param page_size: page size
        :type page_size: int
        :param sort_direction: Sort direction
        :type sort_direction: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_audit_logs_serialize(
            project_id=project_id,
            account_id=account_id,
            event_types=event_types,
            var_from=var_from,
            to=to,
            last_evaluated_event_id=last_evaluated_event_id,
            last_evaluated_timestamp=last_evaluated_timestamp,
            page_size=page_size,
            sort_direction=sort_direction,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuditLogPagedResource",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_audit_logs_serialize(
        self,
        project_id,
        account_id,
        event_types,
        var_from,
        to,
        last_evaluated_event_id,
        last_evaluated_timestamp,
        page_size,
        sort_direction,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if project_id is not None:
            
            _query_params.append(('projectId', project_id))
            
        if account_id is not None:
            
            _query_params.append(('accountId', account_id))
            
        if event_types is not None:
            
            _query_params.append(('eventTypes', event_types))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if last_evaluated_event_id is not None:
            
            _query_params.append(('lastEvaluatedEventId', last_evaluated_event_id))
            
        if last_evaluated_timestamp is not None:
            
            _query_params.append(('lastEvaluatedTimestamp', last_evaluated_timestamp))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if sort_direction is not None:
            
            _query_params.append(('sortDirection', sort_direction))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/auditlog',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


