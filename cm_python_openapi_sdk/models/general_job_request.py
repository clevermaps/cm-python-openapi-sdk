# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from cm_python_openapi_sdk.models.bulk_point_query_job_request import BulkPointQueryJobRequest
from cm_python_openapi_sdk.models.data_dump_job_request import DataDumpJobRequest
from cm_python_openapi_sdk.models.data_pull_job_request import DataPullJobRequest
from cm_python_openapi_sdk.models.export_job_request import ExportJobRequest
from cm_python_openapi_sdk.models.import_project_job_request import ImportProjectJobRequest
from cm_python_openapi_sdk.models.truncate_job_request import TruncateJobRequest
from cm_python_openapi_sdk.models.validate_job_request import ValidateJobRequest
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

GENERALJOBREQUEST_ONE_OF_SCHEMAS = ["BulkPointQueryJobRequest", "DataDumpJobRequest", "DataPullJobRequest", "ExportJobRequest", "ImportProjectJobRequest", "TruncateJobRequest", "ValidateJobRequest"]

class GeneralJobRequest(BaseModel):
    """
    GeneralJobRequest
    """
    # data type: DataDumpJobRequest
    oneof_schema_1_validator: Optional[DataDumpJobRequest] = None
    # data type: DataPullJobRequest
    oneof_schema_2_validator: Optional[DataPullJobRequest] = None
    # data type: ExportJobRequest
    oneof_schema_3_validator: Optional[ExportJobRequest] = None
    # data type: BulkPointQueryJobRequest
    oneof_schema_4_validator: Optional[BulkPointQueryJobRequest] = None
    # data type: ValidateJobRequest
    oneof_schema_5_validator: Optional[ValidateJobRequest] = None
    # data type: TruncateJobRequest
    oneof_schema_6_validator: Optional[TruncateJobRequest] = None
    # data type: ImportProjectJobRequest
    oneof_schema_7_validator: Optional[ImportProjectJobRequest] = None
    actual_instance: Optional[Union[BulkPointQueryJobRequest, DataDumpJobRequest, DataPullJobRequest, ExportJobRequest, ImportProjectJobRequest, TruncateJobRequest, ValidateJobRequest]] = None
    one_of_schemas: Set[str] = { "BulkPointQueryJobRequest", "DataDumpJobRequest", "DataPullJobRequest", "ExportJobRequest", "ImportProjectJobRequest", "TruncateJobRequest", "ValidateJobRequest" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = GeneralJobRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: DataDumpJobRequest
        if not isinstance(v, DataDumpJobRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DataDumpJobRequest`")
        else:
            match += 1
        # validate data type: DataPullJobRequest
        if not isinstance(v, DataPullJobRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DataPullJobRequest`")
        else:
            match += 1
        # validate data type: ExportJobRequest
        if not isinstance(v, ExportJobRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExportJobRequest`")
        else:
            match += 1
        # validate data type: BulkPointQueryJobRequest
        if not isinstance(v, BulkPointQueryJobRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BulkPointQueryJobRequest`")
        else:
            match += 1
        # validate data type: ValidateJobRequest
        if not isinstance(v, ValidateJobRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ValidateJobRequest`")
        else:
            match += 1
        # validate data type: TruncateJobRequest
        if not isinstance(v, TruncateJobRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TruncateJobRequest`")
        else:
            match += 1
        # validate data type: ImportProjectJobRequest
        if not isinstance(v, ImportProjectJobRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImportProjectJobRequest`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in GeneralJobRequest with oneOf schemas: BulkPointQueryJobRequest, DataDumpJobRequest, DataPullJobRequest, ExportJobRequest, ImportProjectJobRequest, TruncateJobRequest, ValidateJobRequest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in GeneralJobRequest with oneOf schemas: BulkPointQueryJobRequest, DataDumpJobRequest, DataPullJobRequest, ExportJobRequest, ImportProjectJobRequest, TruncateJobRequest, ValidateJobRequest. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `type` in the input.")

        # check if data type is `BulkPointQueryJobRequest`
        if _data_type == "bulkPointQuery":
            instance.actual_instance = BulkPointQueryJobRequest.from_json(json_str)
            return instance

        # check if data type is `DataDumpJobRequest`
        if _data_type == "dataDump":
            instance.actual_instance = DataDumpJobRequest.from_json(json_str)
            return instance

        # check if data type is `DataPullJobRequest`
        if _data_type == "dataPull":
            instance.actual_instance = DataPullJobRequest.from_json(json_str)
            return instance

        # check if data type is `ExportJobRequest`
        if _data_type == "export":
            instance.actual_instance = ExportJobRequest.from_json(json_str)
            return instance

        # check if data type is `ImportProjectJobRequest`
        if _data_type == "importProject":
            instance.actual_instance = ImportProjectJobRequest.from_json(json_str)
            return instance

        # check if data type is `TruncateJobRequest`
        if _data_type == "truncate":
            instance.actual_instance = TruncateJobRequest.from_json(json_str)
            return instance

        # check if data type is `ValidateJobRequest`
        if _data_type == "validate":
            instance.actual_instance = ValidateJobRequest.from_json(json_str)
            return instance

        # check if data type is `BulkPointQueryJobRequest`
        if _data_type == "BulkPointQueryJobRequest":
            instance.actual_instance = BulkPointQueryJobRequest.from_json(json_str)
            return instance

        # check if data type is `DataDumpJobRequest`
        if _data_type == "DataDumpJobRequest":
            instance.actual_instance = DataDumpJobRequest.from_json(json_str)
            return instance

        # check if data type is `DataPullJobRequest`
        if _data_type == "DataPullJobRequest":
            instance.actual_instance = DataPullJobRequest.from_json(json_str)
            return instance

        # check if data type is `ExportJobRequest`
        if _data_type == "ExportJobRequest":
            instance.actual_instance = ExportJobRequest.from_json(json_str)
            return instance

        # check if data type is `ImportProjectJobRequest`
        if _data_type == "ImportProjectJobRequest":
            instance.actual_instance = ImportProjectJobRequest.from_json(json_str)
            return instance

        # check if data type is `TruncateJobRequest`
        if _data_type == "TruncateJobRequest":
            instance.actual_instance = TruncateJobRequest.from_json(json_str)
            return instance

        # check if data type is `ValidateJobRequest`
        if _data_type == "ValidateJobRequest":
            instance.actual_instance = ValidateJobRequest.from_json(json_str)
            return instance

        # deserialize data into DataDumpJobRequest
        try:
            instance.actual_instance = DataDumpJobRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DataPullJobRequest
        try:
            instance.actual_instance = DataPullJobRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ExportJobRequest
        try:
            instance.actual_instance = ExportJobRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BulkPointQueryJobRequest
        try:
            instance.actual_instance = BulkPointQueryJobRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ValidateJobRequest
        try:
            instance.actual_instance = ValidateJobRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TruncateJobRequest
        try:
            instance.actual_instance = TruncateJobRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ImportProjectJobRequest
        try:
            instance.actual_instance = ImportProjectJobRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into GeneralJobRequest with oneOf schemas: BulkPointQueryJobRequest, DataDumpJobRequest, DataPullJobRequest, ExportJobRequest, ImportProjectJobRequest, TruncateJobRequest, ValidateJobRequest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into GeneralJobRequest with oneOf schemas: BulkPointQueryJobRequest, DataDumpJobRequest, DataPullJobRequest, ExportJobRequest, ImportProjectJobRequest, TruncateJobRequest, ValidateJobRequest. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BulkPointQueryJobRequest, DataDumpJobRequest, DataPullJobRequest, ExportJobRequest, ImportProjectJobRequest, TruncateJobRequest, ValidateJobRequest]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


