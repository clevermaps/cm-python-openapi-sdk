# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from cm_python_openapi_sdk.models.category_dto import CategoryDTO
from cm_python_openapi_sdk.models.granularity_category_dto import GranularityCategoryDTO
from cm_python_openapi_sdk.models.marker_selector_content_dto_keep_filtered import MarkerSelectorContentDTOKeepFiltered
from typing import Optional, Set
from typing_extensions import Self

class MarkerSelectorContentDTO(BaseModel):
    """
    MarkerSelectorContentDTO
    """ # noqa: E501
    categories: Optional[List[CategoryDTO]] = None
    granularity_categories: Optional[List[GranularityCategoryDTO]] = Field(default=None, alias="granularityCategories")
    hide_granularity: Optional[StrictBool] = Field(default=None, alias="hideGranularity")
    keep_filtered: Optional[MarkerSelectorContentDTOKeepFiltered] = Field(default=None, alias="keepFiltered")
    show_indicator_values_on_map: Optional[StrictBool] = Field(default=None, alias="showIndicatorValuesOnMap")
    cluster_markers: Optional[StrictBool] = Field(default=None, alias="clusterMarkers")
    __properties: ClassVar[List[str]] = ["categories", "granularityCategories", "hideGranularity", "keepFiltered", "showIndicatorValuesOnMap", "clusterMarkers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarkerSelectorContentDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in granularity_categories (list)
        _items = []
        if self.granularity_categories:
            for _item_granularity_categories in self.granularity_categories:
                if _item_granularity_categories:
                    _items.append(_item_granularity_categories.to_dict())
            _dict['granularityCategories'] = _items
        # override the default output from pydantic by calling `to_dict()` of keep_filtered
        if self.keep_filtered:
            _dict['keepFiltered'] = self.keep_filtered.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarkerSelectorContentDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categories": [CategoryDTO.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "granularityCategories": [GranularityCategoryDTO.from_dict(_item) for _item in obj["granularityCategories"]] if obj.get("granularityCategories") is not None else None,
            "hideGranularity": obj.get("hideGranularity"),
            "keepFiltered": MarkerSelectorContentDTOKeepFiltered.from_dict(obj["keepFiltered"]) if obj.get("keepFiltered") is not None else None,
            "showIndicatorValuesOnMap": obj.get("showIndicatorValuesOnMap"),
            "clusterMarkers": obj.get("clusterMarkers")
        })
        return _obj


