# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from cm_python_openapi_sdk.models.having_comp import HavingComp
from cm_python_openapi_sdk.models.having_in1 import HavingIn1
from cm_python_openapi_sdk.models.having_unary import HavingUnary
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

HAVING1_ONE_OF_SCHEMAS = ["HavingComp", "HavingIn1", "HavingUnary"]

class Having1(BaseModel):
    """
    Having1
    """
    # data type: HavingComp
    oneof_schema_1_validator: Optional[HavingComp] = None
    # data type: HavingIn1
    oneof_schema_2_validator: Optional[HavingIn1] = None
    # data type: HavingUnary
    oneof_schema_3_validator: Optional[HavingUnary] = None
    actual_instance: Optional[Union[HavingComp, HavingIn1, HavingUnary]] = None
    one_of_schemas: Set[str] = { "HavingComp", "HavingIn1", "HavingUnary" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Having1.model_construct()
        error_messages = []
        match = 0
        # validate data type: HavingComp
        if not isinstance(v, HavingComp):
            error_messages.append(f"Error! Input type `{type(v)}` is not `HavingComp`")
        else:
            match += 1
        # validate data type: HavingIn1
        if not isinstance(v, HavingIn1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `HavingIn1`")
        else:
            match += 1
        # validate data type: HavingUnary
        if not isinstance(v, HavingUnary):
            error_messages.append(f"Error! Input type `{type(v)}` is not `HavingUnary`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Having1 with oneOf schemas: HavingComp, HavingIn1, HavingUnary. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Having1 with oneOf schemas: HavingComp, HavingIn1, HavingUnary. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("operator")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `operator` in the input.")

        # check if data type is `HavingComp`
        if _data_type == "eq":
            instance.actual_instance = HavingComp.from_json(json_str)
            return instance

        # check if data type is `HavingComp`
        if _data_type == "gt":
            instance.actual_instance = HavingComp.from_json(json_str)
            return instance

        # check if data type is `HavingComp`
        if _data_type == "gte":
            instance.actual_instance = HavingComp.from_json(json_str)
            return instance

        # check if data type is `HavingIn`
        if _data_type == "in":
            instance.actual_instance = HavingIn.from_json(json_str)
            return instance

        # check if data type is `HavingUnary`
        if _data_type == "isNotNull":
            instance.actual_instance = HavingUnary.from_json(json_str)
            return instance

        # check if data type is `HavingUnary`
        if _data_type == "isNull":
            instance.actual_instance = HavingUnary.from_json(json_str)
            return instance

        # check if data type is `HavingComp`
        if _data_type == "lt":
            instance.actual_instance = HavingComp.from_json(json_str)
            return instance

        # check if data type is `HavingComp`
        if _data_type == "lte":
            instance.actual_instance = HavingComp.from_json(json_str)
            return instance

        # check if data type is `HavingComp`
        if _data_type == "ne":
            instance.actual_instance = HavingComp.from_json(json_str)
            return instance

        # check if data type is `HavingComp`
        if _data_type == "HavingComp":
            instance.actual_instance = HavingComp.from_json(json_str)
            return instance

        # check if data type is `HavingIn1`
        if _data_type == "HavingIn_1":
            instance.actual_instance = HavingIn1.from_json(json_str)
            return instance

        # check if data type is `HavingUnary`
        if _data_type == "HavingUnary":
            instance.actual_instance = HavingUnary.from_json(json_str)
            return instance

        # deserialize data into HavingComp
        try:
            instance.actual_instance = HavingComp.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into HavingIn1
        try:
            instance.actual_instance = HavingIn1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into HavingUnary
        try:
            instance.actual_instance = HavingUnary.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Having1 with oneOf schemas: HavingComp, HavingIn1, HavingUnary. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Having1 with oneOf schemas: HavingComp, HavingIn1, HavingUnary. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], HavingComp, HavingIn1, HavingUnary]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


