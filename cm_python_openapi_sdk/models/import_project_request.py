# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ImportProjectRequest(BaseModel):
    """
    ImportProjectRequest
    """ # noqa: E501
    force: StrictBool
    source_project_id: StrictStr = Field(alias="sourceProjectId")
    cascade_from: Optional[StrictStr] = Field(default=None, alias="cascadeFrom")
    prefix: Optional[StrictStr] = None
    attribute_styles: Optional[StrictBool] = Field(default=False, alias="attributeStyles")
    dashboard: Optional[StrictBool] = False
    data_permissions: Optional[StrictBool] = Field(default=False, alias="dataPermissions")
    datasets: Optional[StrictBool] = False
    exports: Optional[StrictBool] = False
    indicators: Optional[StrictBool] = False
    indicator_drills: Optional[StrictBool] = Field(default=False, alias="indicatorDrills")
    maps: Optional[StrictBool] = False
    markers: Optional[StrictBool] = False
    marker_selectors: Optional[StrictBool] = Field(default=False, alias="markerSelectors")
    metrics: Optional[StrictBool] = False
    project_settings: Optional[StrictBool] = Field(default=False, alias="projectSettings")
    views: Optional[StrictBool] = False
    skip_data: Optional[StrictBool] = Field(default=False, alias="skipData")
    __properties: ClassVar[List[str]] = ["force", "sourceProjectId", "cascadeFrom", "prefix", "attributeStyles", "dashboard", "dataPermissions", "datasets", "exports", "indicators", "indicatorDrills", "maps", "markers", "markerSelectors", "metrics", "projectSettings", "views", "skipData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportProjectRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportProjectRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "force": obj.get("force"),
            "sourceProjectId": obj.get("sourceProjectId"),
            "cascadeFrom": obj.get("cascadeFrom"),
            "prefix": obj.get("prefix"),
            "attributeStyles": obj.get("attributeStyles") if obj.get("attributeStyles") is not None else False,
            "dashboard": obj.get("dashboard") if obj.get("dashboard") is not None else False,
            "dataPermissions": obj.get("dataPermissions") if obj.get("dataPermissions") is not None else False,
            "datasets": obj.get("datasets") if obj.get("datasets") is not None else False,
            "exports": obj.get("exports") if obj.get("exports") is not None else False,
            "indicators": obj.get("indicators") if obj.get("indicators") is not None else False,
            "indicatorDrills": obj.get("indicatorDrills") if obj.get("indicatorDrills") is not None else False,
            "maps": obj.get("maps") if obj.get("maps") is not None else False,
            "markers": obj.get("markers") if obj.get("markers") is not None else False,
            "markerSelectors": obj.get("markerSelectors") if obj.get("markerSelectors") is not None else False,
            "metrics": obj.get("metrics") if obj.get("metrics") is not None else False,
            "projectSettings": obj.get("projectSettings") if obj.get("projectSettings") is not None else False,
            "views": obj.get("views") if obj.get("views") is not None else False,
            "skipData": obj.get("skipData") if obj.get("skipData") is not None else False
        })
        return _obj


