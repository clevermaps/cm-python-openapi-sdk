# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cm_python_openapi_sdk.models.center_dto import CenterDTO
from cm_python_openapi_sdk.models.map_options_dto_custom_tile_layer import MapOptionsDTOCustomTileLayer
from typing import Optional, Set
from typing_extensions import Self

class MapOptionsDTO(BaseModel):
    """
    MapOptionsDTO
    """ # noqa: E501
    center: Optional[CenterDTO] = None
    zoom: Optional[StrictInt] = None
    min_zoom: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="minZoom")
    max_zoom: Optional[StrictInt] = Field(default=None, alias="maxZoom")
    tile_layer_menu: Optional[StrictBool] = Field(default=None, alias="tileLayerMenu")
    tile_layer: Optional[StrictStr] = Field(default=None, alias="tileLayer")
    custom_tile_layer: Optional[MapOptionsDTOCustomTileLayer] = Field(default=None, alias="customTileLayer")
    __properties: ClassVar[List[str]] = ["center", "zoom", "minZoom", "maxZoom", "tileLayerMenu", "tileLayer", "customTileLayer"]

    @field_validator('tile_layer')
    def tile_layer_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['mapbox', 'mapboxStreets', 'mapboxOutdoors', 'mapboxSatelliteStreets', 'mapboxLight', 'mapboxDark']):
            raise ValueError("must be one of enum values ('mapbox', 'mapboxStreets', 'mapboxOutdoors', 'mapboxSatelliteStreets', 'mapboxLight', 'mapboxDark')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MapOptionsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of center
        if self.center:
            _dict['center'] = self.center.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_tile_layer
        if self.custom_tile_layer:
            _dict['customTileLayer'] = self.custom_tile_layer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MapOptionsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "center": CenterDTO.from_dict(obj["center"]) if obj.get("center") is not None else None,
            "zoom": obj.get("zoom"),
            "minZoom": obj.get("minZoom"),
            "maxZoom": obj.get("maxZoom"),
            "tileLayerMenu": obj.get("tileLayerMenu"),
            "tileLayer": obj.get("tileLayer"),
            "customTileLayer": MapOptionsDTOCustomTileLayer.from_dict(obj["customTileLayer"]) if obj.get("customTileLayer") is not None else None
        })
        return _obj


