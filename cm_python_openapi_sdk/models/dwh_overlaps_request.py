# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from cm_python_openapi_sdk.models.dwh_query_request1 import DwhQueryRequest1
from cm_python_openapi_sdk.models.filter_by import FilterBy
from typing import Optional, Set
from typing_extensions import Self

class DwhOverlapsRequest(BaseModel):
    """
    DwhOverlapsRequest
    """ # noqa: E501
    operators: Annotated[List[StrictStr], Field(min_length=1)]
    objects: Annotated[List[FilterBy], Field(min_length=2, max_length=2)]
    granularity: Annotated[str, Field(strict=True)]
    query: DwhQueryRequest1
    __properties: ClassVar[List[str]] = ["operators", "objects", "granularity", "query"]

    @field_validator('operators')
    def operators_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['self', 'subtract', 'intersect', 'major_dominance', 'minor_dominance', 'equivalent_dominance']):
                raise ValueError("each list item must be one of ('self', 'subtract', 'intersect', 'major_dominance', 'minor_dominance', 'equivalent_dominance')")
        return value

    @field_validator('granularity')
    def granularity_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z][a-z0-9_-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9_-]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DwhOverlapsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in objects (list)
        _items = []
        if self.objects:
            for _item_objects in self.objects:
                if _item_objects:
                    _items.append(_item_objects.to_dict())
            _dict['objects'] = _items
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DwhOverlapsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operators": obj.get("operators"),
            "objects": [FilterBy.from_dict(_item) for _item in obj["objects"]] if obj.get("objects") is not None else None,
            "granularity": obj.get("granularity"),
            "query": DwhQueryRequest1.from_dict(obj["query"]) if obj.get("query") is not None else None
        })
        return _obj


