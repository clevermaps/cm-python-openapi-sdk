# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cm_python_openapi_sdk.models.membership_response_dto import MembershipResponseDTO
from cm_python_openapi_sdk.models.project_response_dto_services import ProjectResponseDTOServices
from typing import Optional, Set
from typing_extensions import Self

class ProjectResponseDTO(BaseModel):
    """
    ProjectResponseDTO
    """ # noqa: E501
    id: Annotated[str, Field(strict=True)]
    title: Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    description: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    organization_id: Annotated[str, Field(strict=True)] = Field(alias="organizationId")
    status: StrictStr
    share: StrictStr
    created_at: StrictStr = Field(alias="createdAt")
    modified_at: Optional[StrictStr] = Field(default=None, alias="modifiedAt")
    membership: Optional[MembershipResponseDTO] = None
    services: Optional[ProjectResponseDTOServices] = None
    links: List[Dict[str, Any]] = Field(description="define keys links and page that are mandatory for all pageble responses")
    __properties: ClassVar[List[str]] = ["id", "title", "description", "organizationId", "status", "share", "createdAt", "modifiedAt", "membership", "services", "links"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9]{16}$/")
        return value

    @field_validator('organization_id')
    def organization_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9]{16}$/")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ENABLED', 'DISABLED']):
            raise ValueError("must be one of enum values ('ENABLED', 'DISABLED')")
        return value

    @field_validator('share')
    def share_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PRIVATE', 'PUBLIC', 'DEMO', 'DIMENSION', 'TEMPLATE']):
            raise ValueError("must be one of enum values ('PRIVATE', 'PUBLIC', 'DEMO', 'DIMENSION', 'TEMPLATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectResponseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of membership
        if self.membership:
            _dict['membership'] = self.membership.to_dict()
        # override the default output from pydantic by calling `to_dict()` of services
        if self.services:
            _dict['services'] = self.services.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectResponseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "organizationId": obj.get("organizationId"),
            "status": obj.get("status"),
            "share": obj.get("share"),
            "createdAt": obj.get("createdAt"),
            "modifiedAt": obj.get("modifiedAt"),
            "membership": MembershipResponseDTO.from_dict(obj["membership"]) if obj.get("membership") is not None else None,
            "services": ProjectResponseDTOServices.from_dict(obj["services"]) if obj.get("services") is not None else None,
            "links": obj.get("links")
        })
        return _obj


