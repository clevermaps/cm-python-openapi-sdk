# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cm_python_openapi_sdk.models.project_template_dto import ProjectTemplateDTO
from typing import Optional, Set
from typing_extensions import Self

class ProjectSettingsContentDTO(BaseModel):
    """
    ProjectSettingsContentDTO
    """ # noqa: E501
    geo_search_countries: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="Array of country codes, as defined by ISO 3166 alpha-2, to limit the geographical search.", alias="geoSearchCountries")
    geo_search_providers: List[StrictStr] = Field(description="Array of geographical search providers.", alias="geoSearchProviders")
    project_template: Optional[ProjectTemplateDTO] = Field(default=None, alias="projectTemplate")
    trusted_origins: Optional[List[StrictStr]] = Field(default=None, alias="trustedOrigins")
    allow_unsecured_origins: Optional[StrictBool] = Field(default=False, alias="allowUnsecuredOrigins")
    default_views: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, alias="defaultViews")
    __properties: ClassVar[List[str]] = ["geoSearchCountries", "geoSearchProviders", "projectTemplate", "trustedOrigins", "allowUnsecuredOrigins", "defaultViews"]

    @field_validator('geo_search_providers')
    def geo_search_providers_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['Mapbox', 'LocationIQ']):
                raise ValueError("each list item must be one of ('Mapbox', 'LocationIQ')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectSettingsContentDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project_template
        if self.project_template:
            _dict['projectTemplate'] = self.project_template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectSettingsContentDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "geoSearchCountries": obj.get("geoSearchCountries"),
            "geoSearchProviders": obj.get("geoSearchProviders"),
            "projectTemplate": ProjectTemplateDTO.from_dict(obj["projectTemplate"]) if obj.get("projectTemplate") is not None else None,
            "trustedOrigins": obj.get("trustedOrigins"),
            "allowUnsecuredOrigins": obj.get("allowUnsecuredOrigins") if obj.get("allowUnsecuredOrigins") is not None else False,
            "defaultViews": obj.get("defaultViews")
        })
        return _obj


