# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cm_python_openapi_sdk.models.additional_series_link_dto import AdditionalSeriesLinkDTO
from cm_python_openapi_sdk.models.annotation_link_dto import AnnotationLinkDTO
from typing import Optional, Set
from typing_extensions import Self

class TimeSeriesDTO(BaseModel):
    """
    TimeSeriesDTO
    """ # noqa: E501
    type: StrictStr
    title: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    indicator: Optional[Annotated[str, Field(strict=True)]] = None
    collapsed: Optional[StrictBool] = None
    visualized: Optional[StrictBool] = None
    default_period: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="defaultPeriod")
    additional_series: Optional[List[AdditionalSeriesLinkDTO]] = Field(default=None, alias="additionalSeries")
    annotations: Optional[List[AnnotationLinkDTO]] = None
    __properties: ClassVar[List[str]] = ["type", "title", "indicator", "collapsed", "visualized", "defaultPeriod", "additionalSeries", "annotations"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['timeSeries']):
            raise ValueError("must be one of enum values ('timeSeries')")
        return value

    @field_validator('indicator')
    def indicator_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @field_validator('default_period')
    def default_period_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/datasets(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/datasets(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeSeriesDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_series (list)
        _items = []
        if self.additional_series:
            for _item_additional_series in self.additional_series:
                if _item_additional_series:
                    _items.append(_item_additional_series.to_dict())
            _dict['additionalSeries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeSeriesDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "title": obj.get("title"),
            "indicator": obj.get("indicator"),
            "collapsed": obj.get("collapsed"),
            "visualized": obj.get("visualized"),
            "defaultPeriod": obj.get("defaultPeriod"),
            "additionalSeries": [AdditionalSeriesLinkDTO.from_dict(_item) for _item in obj["additionalSeries"]] if obj.get("additionalSeries") is not None else None,
            "annotations": [AnnotationLinkDTO.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None
        })
        return _obj


