# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from cm_python_openapi_sdk.models.dwh_query_metric_type import DwhQueryMetricType
from cm_python_openapi_sdk.models.dwh_query_number_type import DwhQueryNumberType
from cm_python_openapi_sdk.models.dwh_query_property_type import DwhQueryPropertyType
from cm_python_openapi_sdk.models.function_agg_type_general import FunctionAggTypeGeneral
from cm_python_openapi_sdk.models.function_arithm_type_general import FunctionArithmTypeGeneral
from cm_python_openapi_sdk.models.function_condition_type_general import FunctionConditionTypeGeneral
from cm_python_openapi_sdk.models.function_date_trunc import FunctionDateTrunc
from cm_python_openapi_sdk.models.function_distance import FunctionDistance
from cm_python_openapi_sdk.models.function_h3_grid import FunctionH3Grid
from cm_python_openapi_sdk.models.function_interval import FunctionInterval
from cm_python_openapi_sdk.models.function_ntile import FunctionNtile
from cm_python_openapi_sdk.models.function_percent_to_total_type_general import FunctionPercentToTotalTypeGeneral
from cm_python_openapi_sdk.models.function_percentile import FunctionPercentile
from cm_python_openapi_sdk.models.function_rank import FunctionRank
from cm_python_openapi_sdk.models.function_round_type_general import FunctionRoundTypeGeneral
from cm_python_openapi_sdk.models.function_row_number import FunctionRowNumber
from cm_python_openapi_sdk.models.function_today import FunctionToday
from cm_python_openapi_sdk.models.variable_type import VariableType
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

DWHQUERYFUNCTIONTYPES_ONE_OF_SCHEMAS = ["DwhQueryMetricType", "DwhQueryNumberType", "DwhQueryPropertyType", "FunctionAggTypeGeneral", "FunctionArithmTypeGeneral", "FunctionConditionTypeGeneral", "FunctionDateTrunc", "FunctionDistance", "FunctionH3Grid", "FunctionInterval", "FunctionNtile", "FunctionPercentToTotalTypeGeneral", "FunctionPercentile", "FunctionRank", "FunctionRoundTypeGeneral", "FunctionRowNumber", "FunctionToday", "VariableType"]

class DwhQueryFunctionTypes(BaseModel):
    """
    DwhQueryFunctionTypes
    """
    # data type: DwhQueryNumberType
    oneof_schema_1_validator: Optional[DwhQueryNumberType] = None
    # data type: VariableType
    oneof_schema_2_validator: Optional[VariableType] = None
    # data type: DwhQueryPropertyType
    oneof_schema_3_validator: Optional[DwhQueryPropertyType] = None
    # data type: DwhQueryMetricType
    oneof_schema_4_validator: Optional[DwhQueryMetricType] = None
    # data type: FunctionArithmTypeGeneral
    oneof_schema_5_validator: Optional[FunctionArithmTypeGeneral] = None
    # data type: FunctionConditionTypeGeneral
    oneof_schema_6_validator: Optional[FunctionConditionTypeGeneral] = None
    # data type: FunctionAggTypeGeneral
    oneof_schema_7_validator: Optional[FunctionAggTypeGeneral] = None
    # data type: FunctionPercentToTotalTypeGeneral
    oneof_schema_8_validator: Optional[FunctionPercentToTotalTypeGeneral] = None
    # data type: FunctionNtile
    oneof_schema_9_validator: Optional[FunctionNtile] = None
    # data type: FunctionRank
    oneof_schema_10_validator: Optional[FunctionRank] = None
    # data type: FunctionPercentile
    oneof_schema_11_validator: Optional[FunctionPercentile] = None
    # data type: FunctionRowNumber
    oneof_schema_12_validator: Optional[FunctionRowNumber] = None
    # data type: FunctionRoundTypeGeneral
    oneof_schema_13_validator: Optional[FunctionRoundTypeGeneral] = None
    # data type: FunctionToday
    oneof_schema_14_validator: Optional[FunctionToday] = None
    # data type: FunctionDateTrunc
    oneof_schema_15_validator: Optional[FunctionDateTrunc] = None
    # data type: FunctionInterval
    oneof_schema_16_validator: Optional[FunctionInterval] = None
    # data type: FunctionH3Grid
    oneof_schema_17_validator: Optional[FunctionH3Grid] = None
    # data type: FunctionDistance
    oneof_schema_18_validator: Optional[FunctionDistance] = None
    actual_instance: Optional[Union[DwhQueryMetricType, DwhQueryNumberType, DwhQueryPropertyType, FunctionAggTypeGeneral, FunctionArithmTypeGeneral, FunctionConditionTypeGeneral, FunctionDateTrunc, FunctionDistance, FunctionH3Grid, FunctionInterval, FunctionNtile, FunctionPercentToTotalTypeGeneral, FunctionPercentile, FunctionRank, FunctionRoundTypeGeneral, FunctionRowNumber, FunctionToday, VariableType]] = None
    one_of_schemas: Set[str] = { "DwhQueryMetricType", "DwhQueryNumberType", "DwhQueryPropertyType", "FunctionAggTypeGeneral", "FunctionArithmTypeGeneral", "FunctionConditionTypeGeneral", "FunctionDateTrunc", "FunctionDistance", "FunctionH3Grid", "FunctionInterval", "FunctionNtile", "FunctionPercentToTotalTypeGeneral", "FunctionPercentile", "FunctionRank", "FunctionRoundTypeGeneral", "FunctionRowNumber", "FunctionToday", "VariableType" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = DwhQueryFunctionTypes.model_construct()
        error_messages = []
        match = 0
        # validate data type: DwhQueryNumberType
        if not isinstance(v, DwhQueryNumberType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DwhQueryNumberType`")
        else:
            match += 1
        # validate data type: VariableType
        if not isinstance(v, VariableType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VariableType`")
        else:
            match += 1
        # validate data type: DwhQueryPropertyType
        if not isinstance(v, DwhQueryPropertyType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DwhQueryPropertyType`")
        else:
            match += 1
        # validate data type: DwhQueryMetricType
        if not isinstance(v, DwhQueryMetricType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DwhQueryMetricType`")
        else:
            match += 1
        # validate data type: FunctionArithmTypeGeneral
        if not isinstance(v, FunctionArithmTypeGeneral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionArithmTypeGeneral`")
        else:
            match += 1
        # validate data type: FunctionConditionTypeGeneral
        if not isinstance(v, FunctionConditionTypeGeneral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionConditionTypeGeneral`")
        else:
            match += 1
        # validate data type: FunctionAggTypeGeneral
        if not isinstance(v, FunctionAggTypeGeneral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionAggTypeGeneral`")
        else:
            match += 1
        # validate data type: FunctionPercentToTotalTypeGeneral
        if not isinstance(v, FunctionPercentToTotalTypeGeneral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionPercentToTotalTypeGeneral`")
        else:
            match += 1
        # validate data type: FunctionNtile
        if not isinstance(v, FunctionNtile):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionNtile`")
        else:
            match += 1
        # validate data type: FunctionRank
        if not isinstance(v, FunctionRank):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionRank`")
        else:
            match += 1
        # validate data type: FunctionPercentile
        if not isinstance(v, FunctionPercentile):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionPercentile`")
        else:
            match += 1
        # validate data type: FunctionRowNumber
        if not isinstance(v, FunctionRowNumber):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionRowNumber`")
        else:
            match += 1
        # validate data type: FunctionRoundTypeGeneral
        if not isinstance(v, FunctionRoundTypeGeneral):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionRoundTypeGeneral`")
        else:
            match += 1
        # validate data type: FunctionToday
        if not isinstance(v, FunctionToday):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionToday`")
        else:
            match += 1
        # validate data type: FunctionDateTrunc
        if not isinstance(v, FunctionDateTrunc):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionDateTrunc`")
        else:
            match += 1
        # validate data type: FunctionInterval
        if not isinstance(v, FunctionInterval):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionInterval`")
        else:
            match += 1
        # validate data type: FunctionH3Grid
        if not isinstance(v, FunctionH3Grid):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionH3Grid`")
        else:
            match += 1
        # validate data type: FunctionDistance
        if not isinstance(v, FunctionDistance):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FunctionDistance`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in DwhQueryFunctionTypes with oneOf schemas: DwhQueryMetricType, DwhQueryNumberType, DwhQueryPropertyType, FunctionAggTypeGeneral, FunctionArithmTypeGeneral, FunctionConditionTypeGeneral, FunctionDateTrunc, FunctionDistance, FunctionH3Grid, FunctionInterval, FunctionNtile, FunctionPercentToTotalTypeGeneral, FunctionPercentile, FunctionRank, FunctionRoundTypeGeneral, FunctionRowNumber, FunctionToday, VariableType. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in DwhQueryFunctionTypes with oneOf schemas: DwhQueryMetricType, DwhQueryNumberType, DwhQueryPropertyType, FunctionAggTypeGeneral, FunctionArithmTypeGeneral, FunctionConditionTypeGeneral, FunctionDateTrunc, FunctionDistance, FunctionH3Grid, FunctionInterval, FunctionNtile, FunctionPercentToTotalTypeGeneral, FunctionPercentile, FunctionRank, FunctionRoundTypeGeneral, FunctionRowNumber, FunctionToday, VariableType. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into DwhQueryNumberType
        try:
            instance.actual_instance = DwhQueryNumberType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VariableType
        try:
            instance.actual_instance = VariableType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DwhQueryPropertyType
        try:
            instance.actual_instance = DwhQueryPropertyType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DwhQueryMetricType
        try:
            instance.actual_instance = DwhQueryMetricType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionArithmTypeGeneral
        try:
            instance.actual_instance = FunctionArithmTypeGeneral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionConditionTypeGeneral
        try:
            instance.actual_instance = FunctionConditionTypeGeneral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionAggTypeGeneral
        try:
            instance.actual_instance = FunctionAggTypeGeneral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionPercentToTotalTypeGeneral
        try:
            instance.actual_instance = FunctionPercentToTotalTypeGeneral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionNtile
        try:
            instance.actual_instance = FunctionNtile.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionRank
        try:
            instance.actual_instance = FunctionRank.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionPercentile
        try:
            instance.actual_instance = FunctionPercentile.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionRowNumber
        try:
            instance.actual_instance = FunctionRowNumber.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionRoundTypeGeneral
        try:
            instance.actual_instance = FunctionRoundTypeGeneral.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionToday
        try:
            instance.actual_instance = FunctionToday.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionDateTrunc
        try:
            instance.actual_instance = FunctionDateTrunc.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionInterval
        try:
            instance.actual_instance = FunctionInterval.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionH3Grid
        try:
            instance.actual_instance = FunctionH3Grid.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FunctionDistance
        try:
            instance.actual_instance = FunctionDistance.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into DwhQueryFunctionTypes with oneOf schemas: DwhQueryMetricType, DwhQueryNumberType, DwhQueryPropertyType, FunctionAggTypeGeneral, FunctionArithmTypeGeneral, FunctionConditionTypeGeneral, FunctionDateTrunc, FunctionDistance, FunctionH3Grid, FunctionInterval, FunctionNtile, FunctionPercentToTotalTypeGeneral, FunctionPercentile, FunctionRank, FunctionRoundTypeGeneral, FunctionRowNumber, FunctionToday, VariableType. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DwhQueryFunctionTypes with oneOf schemas: DwhQueryMetricType, DwhQueryNumberType, DwhQueryPropertyType, FunctionAggTypeGeneral, FunctionArithmTypeGeneral, FunctionConditionTypeGeneral, FunctionDateTrunc, FunctionDistance, FunctionH3Grid, FunctionInterval, FunctionNtile, FunctionPercentToTotalTypeGeneral, FunctionPercentile, FunctionRank, FunctionRoundTypeGeneral, FunctionRowNumber, FunctionToday, VariableType. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DwhQueryMetricType, DwhQueryNumberType, DwhQueryPropertyType, FunctionAggTypeGeneral, FunctionArithmTypeGeneral, FunctionConditionTypeGeneral, FunctionDateTrunc, FunctionDistance, FunctionH3Grid, FunctionInterval, FunctionNtile, FunctionPercentToTotalTypeGeneral, FunctionPercentile, FunctionRank, FunctionRoundTypeGeneral, FunctionRowNumber, FunctionToday, VariableType]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


