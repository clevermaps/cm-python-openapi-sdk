# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cm_python_openapi_sdk.models.export_request_csv_options import ExportRequestCsvOptions
from typing import Optional, Set
from typing_extensions import Self

class ExportRequest(BaseModel):
    """
    ExportRequest
    """ # noqa: E501
    format: StrictStr
    csv_header_format: Optional[StrictStr] = Field(default=None, alias="csvHeaderFormat")
    query: Dict[str, Any]
    csv_options: Optional[ExportRequestCsvOptions] = Field(default=None, alias="csvOptions")
    xlsx_options: Optional[Dict[str, Any]] = Field(default=None, alias="xlsxOptions")
    __properties: ClassVar[List[str]] = ["format", "csvHeaderFormat", "query", "csvOptions", "xlsxOptions"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['csv', 'xlsx']):
            raise ValueError("must be one of enum values ('csv', 'xlsx')")
        return value

    @field_validator('csv_header_format')
    def csv_header_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['basic', 'export', 'template']):
            raise ValueError("must be one of enum values ('basic', 'export', 'template')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of csv_options
        if self.csv_options:
            _dict['csvOptions'] = self.csv_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "format": obj.get("format"),
            "csvHeaderFormat": obj.get("csvHeaderFormat"),
            "query": obj.get("query"),
            "csvOptions": ExportRequestCsvOptions.from_dict(obj["csvOptions"]) if obj.get("csvOptions") is not None else None,
            "xlsxOptions": obj.get("xlsxOptions")
        })
        return _obj


