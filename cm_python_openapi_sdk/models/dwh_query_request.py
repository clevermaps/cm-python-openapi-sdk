# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from cm_python_openapi_sdk.models.dwh_query_property_types import DwhQueryPropertyTypes
from cm_python_openapi_sdk.models.having import Having
from cm_python_openapi_sdk.models.order_by import OrderBy
from cm_python_openapi_sdk.models.result_set_filter import ResultSetFilter
from cm_python_openapi_sdk.models.variable_value import VariableValue
from typing import Optional, Set
from typing_extensions import Self

class DwhQueryRequest(BaseModel):
    """
    DwhQueryRequest
    """ # noqa: E501
    execution_context: Optional[Any] = Field(default=None, alias="executionContext")
    properties: Annotated[List[DwhQueryPropertyTypes], Field(min_length=1)]
    filter_by: Optional[List[FilterBy]] = Field(default=None, alias="filterBy")
    having: Optional[List[Having]] = None
    result_set_filter: Optional[List[ResultSetFilter]] = Field(default=None, alias="resultSetFilter")
    order_by: Optional[List[OrderBy]] = Field(default=None, alias="orderBy")
    variables: Optional[List[VariableValue]] = None
    limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    __properties: ClassVar[List[str]] = ["executionContext", "properties", "filterBy", "having", "resultSetFilter", "orderBy", "variables", "limit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DwhQueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filter_by (list)
        _items = []
        if self.filter_by:
            for _item_filter_by in self.filter_by:
                if _item_filter_by:
                    _items.append(_item_filter_by.to_dict())
            _dict['filterBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in having (list)
        _items = []
        if self.having:
            for _item_having in self.having:
                if _item_having:
                    _items.append(_item_having.to_dict())
            _dict['having'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in result_set_filter (list)
        _items = []
        if self.result_set_filter:
            for _item_result_set_filter in self.result_set_filter:
                if _item_result_set_filter:
                    _items.append(_item_result_set_filter.to_dict())
            _dict['resultSetFilter'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_by (list)
        _items = []
        if self.order_by:
            for _item_order_by in self.order_by:
                if _item_order_by:
                    _items.append(_item_order_by.to_dict())
            _dict['orderBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in variables (list)
        _items = []
        if self.variables:
            for _item_variables in self.variables:
                if _item_variables:
                    _items.append(_item_variables.to_dict())
            _dict['variables'] = _items
        # set to None if execution_context (nullable) is None
        # and model_fields_set contains the field
        if self.execution_context is None and "execution_context" in self.model_fields_set:
            _dict['executionContext'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DwhQueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "executionContext": obj.get("executionContext"),
            "properties": [DwhQueryPropertyTypes.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "filterBy": [FilterBy.from_dict(_item) for _item in obj["filterBy"]] if obj.get("filterBy") is not None else None,
            "having": [Having.from_dict(_item) for _item in obj["having"]] if obj.get("having") is not None else None,
            "resultSetFilter": [ResultSetFilter.from_dict(_item) for _item in obj["resultSetFilter"]] if obj.get("resultSetFilter") is not None else None,
            "orderBy": [OrderBy.from_dict(_item) for _item in obj["orderBy"]] if obj.get("orderBy") is not None else None,
            "variables": [VariableValue.from_dict(_item) for _item in obj["variables"]] if obj.get("variables") is not None else None,
            "limit": obj.get("limit")
        })
        return _obj

from cm_python_openapi_sdk.models.filter_by import FilterBy
# TODO: Rewrite to not use raise_errors
DwhQueryRequest.model_rebuild(raise_errors=False)

