# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class IndicatorGroupDTO(BaseModel):
    """
    IndicatorGroupDTO
    """ # noqa: E501
    type: StrictStr
    title: Annotated[str, Field(min_length=1, strict=True)]
    description: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    collapsed: Optional[StrictBool] = None
    block_rows: List[BlockRowAbstractType] = Field(alias="blockRows")
    __properties: ClassVar[List[str]] = ["type", "title", "description", "collapsed", "blockRows"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['indicatorGroup']):
            raise ValueError("must be one of enum values ('indicatorGroup')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndicatorGroupDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in block_rows (list)
        _items = []
        if self.block_rows:
            for _item_block_rows in self.block_rows:
                if _item_block_rows:
                    _items.append(_item_block_rows.to_dict())
            _dict['blockRows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndicatorGroupDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "collapsed": obj.get("collapsed"),
            "blockRows": [BlockRowAbstractType.from_dict(_item) for _item in obj["blockRows"]] if obj.get("blockRows") is not None else None
        })
        return _obj

from cm_python_openapi_sdk.models.block_row_abstract_type import BlockRowAbstractType
# TODO: Rewrite to not use raise_errors
IndicatorGroupDTO.model_rebuild(raise_errors=False)

