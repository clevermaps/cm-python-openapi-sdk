# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class StyleDTO(BaseModel):
    """
    StyleDTO
    """ # noqa: E501
    fill_color: Optional[StrictStr] = Field(default=None, alias="fillColor")
    fill_hex_color: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="fillHexColor")
    fill_opacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fillOpacity")
    outline_color: Optional[StrictStr] = Field(default=None, alias="outlineColor")
    outline_hex_color: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="outlineHexColor")
    outline_opacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="outlineOpacity")
    outline_width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="outlineWidth")
    size: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["fillColor", "fillHexColor", "fillOpacity", "outlineColor", "outlineHexColor", "outlineOpacity", "outlineWidth", "size"]

    @field_validator('fill_color')
    def fill_color_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['purple', 'green', 'orange', 'blue', 'turquoise', 'pink', 'red', 'lime', 'brown', 'yellow']):
            raise ValueError("must be one of enum values ('purple', 'green', 'orange', 'blue', 'turquoise', 'pink', 'red', 'lime', 'brown', 'yellow')")
        return value

    @field_validator('fill_hex_color')
    def fill_hex_color_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^#([a-fA-F0-9]{6})$", value):
            raise ValueError(r"must validate the regular expression /^#([a-fA-F0-9]{6})$/")
        return value

    @field_validator('outline_color')
    def outline_color_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['purple', 'green', 'orange', 'blue', 'turquoise', 'pink', 'red', 'lime', 'brown', 'yellow']):
            raise ValueError("must be one of enum values ('purple', 'green', 'orange', 'blue', 'turquoise', 'pink', 'red', 'lime', 'brown', 'yellow')")
        return value

    @field_validator('outline_hex_color')
    def outline_hex_color_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^#([a-fA-F0-9]{6})$", value):
            raise ValueError(r"must validate the regular expression /^#([a-fA-F0-9]{6})$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StyleDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StyleDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fillColor": obj.get("fillColor"),
            "fillHexColor": obj.get("fillHexColor"),
            "fillOpacity": obj.get("fillOpacity"),
            "outlineColor": obj.get("outlineColor"),
            "outlineHexColor": obj.get("outlineHexColor"),
            "outlineOpacity": obj.get("outlineOpacity"),
            "outlineWidth": obj.get("outlineWidth"),
            "size": obj.get("size")
        })
        return _obj


