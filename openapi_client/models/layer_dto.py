# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.layer_dto_datasets_inner import LayerDTODatasetsInner
from openapi_client.models.style_dto import StyleDTO
from typing import Optional, Set
from typing_extensions import Self

class LayerDTO(BaseModel):
    """
    LayerDTO
    """ # noqa: E501
    name: Annotated[str, Field(strict=True)]
    indicator: Annotated[str, Field(strict=True)]
    base_style: Optional[StyleDTO] = Field(default=None, alias="baseStyle")
    show_indicator_value_labels: Optional[StrictBool] = Field(default=None, alias="showIndicatorValueLabels")
    cluster_points: Optional[StrictBool] = Field(default=True, alias="clusterPoints")
    keep_filtered: Optional[StrictBool] = Field(default=None, alias="keepFiltered")
    visible: Optional[StrictBool] = True
    default_dataset: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="defaultDataset")
    default_visualization: Optional[StrictStr] = Field(default=None, alias="defaultVisualization")
    datasets: List[LayerDTODatasetsInner]
    __properties: ClassVar[List[str]] = ["name", "indicator", "baseStyle", "showIndicatorValueLabels", "clusterPoints", "keepFiltered", "visible", "defaultDataset", "defaultVisualization", "datasets"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z][a-z0-9_-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9_-]*$/")
        return value

    @field_validator('indicator')
    def indicator_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"(^none$)|(^inherit$)|(^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$)", value):
            raise ValueError(r"must validate the regular expression /(^none$)|(^inherit$)|(^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$)/")
        return value

    @field_validator('default_dataset')
    def default_dataset_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/datasets(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/datasets(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @field_validator('default_visualization')
    def default_visualization_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['dotmap', 'heatmap']):
            raise ValueError("must be one of enum values ('dotmap', 'heatmap')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LayerDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_style
        if self.base_style:
            _dict['baseStyle'] = self.base_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict['datasets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LayerDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "indicator": obj.get("indicator") if obj.get("indicator") is not None else 'inherit',
            "baseStyle": StyleDTO.from_dict(obj["baseStyle"]) if obj.get("baseStyle") is not None else None,
            "showIndicatorValueLabels": obj.get("showIndicatorValueLabels"),
            "clusterPoints": obj.get("clusterPoints") if obj.get("clusterPoints") is not None else True,
            "keepFiltered": obj.get("keepFiltered"),
            "visible": obj.get("visible") if obj.get("visible") is not None else True,
            "defaultDataset": obj.get("defaultDataset"),
            "defaultVisualization": obj.get("defaultVisualization"),
            "datasets": [LayerDTODatasetsInner.from_dict(_item) for _item in obj["datasets"]] if obj.get("datasets") is not None else None
        })
        return _obj


