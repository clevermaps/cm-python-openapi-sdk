# coding: utf-8

"""
    clevermaps-client

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.order_by_dto import OrderByDTO
from typing import Optional, Set
from typing_extensions import Self

class CategoriesDTO(BaseModel):
    """
    CategoriesDTO
    """ # noqa: E501
    type: StrictStr
    title: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = None
    split_property: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="splitProperty")
    attribute_style: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="attributeStyle")
    indicator: Optional[Annotated[str, Field(strict=True)]] = None
    collapsed: Optional[StrictBool] = None
    visualized: Optional[StrictBool] = None
    filterable: Optional[StrictBool] = None
    hide_null_items: Optional[StrictBool] = Field(default=None, alias="hideNullItems")
    size_limit: Optional[StrictInt] = Field(default=None, alias="sizeLimit")
    order_by: Optional[OrderByDTO] = Field(default=None, alias="orderBy")
    vertical: Optional[StrictBool] = None
    condensed: Optional[StrictBool] = None
    dual_property: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="dualProperty")
    dual_attribute_style: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="dualAttributeStyle")
    label: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    __properties: ClassVar[List[str]] = ["type", "title", "description", "splitProperty", "attributeStyle", "indicator", "collapsed", "visualized", "filterable", "hideNullItems", "sizeLimit", "orderBy", "vertical", "condensed", "dualProperty", "dualAttributeStyle", "label"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['categories']):
            raise ValueError("must be one of enum values ('categories')")
        return value

    @field_validator('split_property')
    def split_property_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z][a-z0-9_-]*\.[a-z][a-z0-9_-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9_-]*\.[a-z][a-z0-9_-]*$/")
        return value

    @field_validator('attribute_style')
    def attribute_style_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/attributeStyles(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/attributeStyles(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @field_validator('indicator')
    def indicator_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/indicators(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    @field_validator('dual_property')
    def dual_property_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z][a-z0-9_-]*\.[a-z][a-z0-9_-]*$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9_-]*\.[a-z][a-z0-9_-]*$/")
        return value

    @field_validator('dual_attribute_style')
    def dual_attribute_style_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/attributeStyles(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^\/rest\/projects\/(\$projectId|[a-z0-9]{16})\/md\/attributeStyles(\?name=[a-z0-9_-]+|\/[a-z0-9]+)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CategoriesDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of order_by
        if self.order_by:
            _dict['orderBy'] = self.order_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CategoriesDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "splitProperty": obj.get("splitProperty"),
            "attributeStyle": obj.get("attributeStyle"),
            "indicator": obj.get("indicator"),
            "collapsed": obj.get("collapsed"),
            "visualized": obj.get("visualized"),
            "filterable": obj.get("filterable"),
            "hideNullItems": obj.get("hideNullItems"),
            "sizeLimit": obj.get("sizeLimit"),
            "orderBy": OrderByDTO.from_dict(obj["orderBy"]) if obj.get("orderBy") is not None else None,
            "vertical": obj.get("vertical"),
            "condensed": obj.get("condensed"),
            "dualProperty": obj.get("dualProperty"),
            "dualAttributeStyle": obj.get("dualAttributeStyle"),
            "label": obj.get("label")
        })
        return _obj


