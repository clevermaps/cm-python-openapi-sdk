# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cm_python_openapi_sdk.models.dwh_overlaps_request import DwhOverlapsRequest

class TestDwhOverlapsRequest(unittest.TestCase):
    """DwhOverlapsRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DwhOverlapsRequest:
        """Test DwhOverlapsRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DwhOverlapsRequest`
        """
        model = DwhOverlapsRequest()
        if include_optional:
            return DwhOverlapsRequest(
                operators = [
                    'self'
                    ],
                objects = [
                    null
                    ],
                granularity = 'awat5ikwowtta-3mh2lcafqw3zhes',
                query = {resultSetFilter=[{propertyId=propertyId, value=, operator=eq}, {propertyId=propertyId, value=, operator=eq}], variables=[{variable=variable, value=6.027456183070403}, {variable=variable, value=6.027456183070403}], having=[{propertyId=propertyId, value=0.8008281904610115, operator=eq}, {propertyId=propertyId, value=0.8008281904610115, operator=eq}], executionContext=, limit=1, orderBy=[{property=, nulls=last, propertyId=propertyId, direction=asc}, {property=, nulls=last, propertyId=propertyId, direction=asc}], filterBy=[null, null], properties=[{id=id, type=number, value=0.8008281904610115}, {id=id, type=number, value=0.8008281904610115}]}
            )
        else:
            return DwhOverlapsRequest(
                operators = [
                    'self'
                    ],
                objects = [
                    null
                    ],
                granularity = 'awat5ikwowtta-3mh2lcafqw3zhes',
                query = {resultSetFilter=[{propertyId=propertyId, value=, operator=eq}, {propertyId=propertyId, value=, operator=eq}], variables=[{variable=variable, value=6.027456183070403}, {variable=variable, value=6.027456183070403}], having=[{propertyId=propertyId, value=0.8008281904610115, operator=eq}, {propertyId=propertyId, value=0.8008281904610115, operator=eq}], executionContext=, limit=1, orderBy=[{property=, nulls=last, propertyId=propertyId, direction=asc}, {property=, nulls=last, propertyId=propertyId, direction=asc}], filterBy=[null, null], properties=[{id=id, type=number, value=0.8008281904610115}, {id=id, type=number, value=0.8008281904610115}]},
        )
        """

    def testDwhOverlapsRequest(self):
        """Test DwhOverlapsRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
