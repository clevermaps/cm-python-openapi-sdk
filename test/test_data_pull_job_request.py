# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cm_python_openapi_sdk.models.data_pull_job_request import DataPullJobRequest

class TestDataPullJobRequest(unittest.TestCase):
    """DataPullJobRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataPullJobRequest:
        """Test DataPullJobRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataPullJobRequest`
        """
        model = DataPullJobRequest()
        if include_optional:
            return DataPullJobRequest(
                type = 'E',
                project_id = 'w8q6zgckec0l3o4g',
                content = cm_python_openapi_sdk.models.data_pull_request.DataPullRequest(
                    dataset = '0', 
                    mode = 'full', 
                    type = 'csv', 
                    upload = '', 
                    s3_upload = cm_python_openapi_sdk.models.data_pull_request_s3_upload.DataPullRequest_s3Upload(
                        uri = '', 
                        access_key_id = '', 
                        secret_access_key = '', 
                        region = '', 
                        endpoint_override = '', 
                        force_path_style = True, ), 
                    https_upload = cm_python_openapi_sdk.models.data_pull_request_https_upload.DataPullRequest_httpsUpload(
                        url = '', ), 
                    csv_options = cm_python_openapi_sdk.models.data_pull_request_csv_options.DataPullRequest_csvOptions(
                        header = True, 
                        separator = '', 
                        quote = '', 
                        escape = '', 
                        null = '', 
                        force_null = [
                            ''
                            ], ), 
                    skip_refreshing_materialized_views = True, )
            )
        else:
            return DataPullJobRequest(
                type = 'E',
                project_id = 'w8q6zgckec0l3o4g',
                content = cm_python_openapi_sdk.models.data_pull_request.DataPullRequest(
                    dataset = '0', 
                    mode = 'full', 
                    type = 'csv', 
                    upload = '', 
                    s3_upload = cm_python_openapi_sdk.models.data_pull_request_s3_upload.DataPullRequest_s3Upload(
                        uri = '', 
                        access_key_id = '', 
                        secret_access_key = '', 
                        region = '', 
                        endpoint_override = '', 
                        force_path_style = True, ), 
                    https_upload = cm_python_openapi_sdk.models.data_pull_request_https_upload.DataPullRequest_httpsUpload(
                        url = '', ), 
                    csv_options = cm_python_openapi_sdk.models.data_pull_request_csv_options.DataPullRequest_csvOptions(
                        header = True, 
                        separator = '', 
                        quote = '', 
                        escape = '', 
                        null = '', 
                        force_null = [
                            ''
                            ], ), 
                    skip_refreshing_materialized_views = True, ),
        )
        """

    def testDataPullJobRequest(self):
        """Test DataPullJobRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
