# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cm_python_openapi_sdk.models.block_row_dto import BlockRowDTO

class TestBlockRowDTO(unittest.TestCase):
    """BlockRowDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BlockRowDTO:
        """Test BlockRowDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BlockRowDTO`
        """
        model = BlockRowDTO()
        if include_optional:
            return BlockRowDTO(
                type = 'blockRow',
                blocks = [
                    {indicator=indicator, layout=primary, collapsed=true, blockRows=[{indicator=indicator, filterable=true, visualized=true, collapsed=true, hideNullItems=true, description=description, orderBy={property=property, direction=asc}, condensed=true, vertical=true, label=label, type=categories, title=title, sizeLimit=0, dualProperty=dualProperty, splitProperty=splitProperty, attributeStyle=attributeStyle, dualAttributeStyle=dualAttributeStyle}, {indicator=indicator, filterable=true, visualized=true, collapsed=true, hideNullItems=true, description=description, orderBy={property=property, direction=asc}, condensed=true, vertical=true, label=label, type=categories, title=title, sizeLimit=0, dualProperty=dualProperty, splitProperty=splitProperty, attributeStyle=attributeStyle, dualAttributeStyle=dualAttributeStyle}], type=indicator, title=title, indicatorDrill=indicatorDrill}
                    ]
            )
        else:
            return BlockRowDTO(
                type = 'blockRow',
                blocks = [
                    {indicator=indicator, layout=primary, collapsed=true, blockRows=[{indicator=indicator, filterable=true, visualized=true, collapsed=true, hideNullItems=true, description=description, orderBy={property=property, direction=asc}, condensed=true, vertical=true, label=label, type=categories, title=title, sizeLimit=0, dualProperty=dualProperty, splitProperty=splitProperty, attributeStyle=attributeStyle, dualAttributeStyle=dualAttributeStyle}, {indicator=indicator, filterable=true, visualized=true, collapsed=true, hideNullItems=true, description=description, orderBy={property=property, direction=asc}, condensed=true, vertical=true, label=label, type=categories, title=title, sizeLimit=0, dualProperty=dualProperty, splitProperty=splitProperty, attributeStyle=attributeStyle, dualAttributeStyle=dualAttributeStyle}], type=indicator, title=title, indicatorDrill=indicatorDrill}
                    ],
        )
        """

    def testBlockRowDTO(self):
        """Test BlockRowDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
