# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cm_python_openapi_sdk.models.view_paged_model_dto import ViewPagedModelDTO

class TestViewPagedModelDTO(unittest.TestCase):
    """ViewPagedModelDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ViewPagedModelDTO:
        """Test ViewPagedModelDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ViewPagedModelDTO`
        """
        model = ViewPagedModelDTO()
        if include_optional:
            return ViewPagedModelDTO(
                content = [
                    {name=name, description=description, id=id, type=dataset, title=title, content={compareCollapsed=true, defaultCompareType=dominance, filterGroup=[{property=property, type=date}, {property=property, type=date}], exports=[{export=export}, {export=export}], icon=icon, defaultGranularity=defaultGranularity, defaultTool=search, defaultVisualization=areas, excludeDatasets=[excludeDatasets, excludeDatasets], mapOptions={maxZoom=2, customTileLayer={accessToken=accessToken, url=url}, tileLayer=mapbox, center={lng=6.027456183070403, lat=0.8008281904610115}, tileLayerMenu=true, minZoom=0, zoom=9}, map=map, dashboard=dashboard, showAttributesOnDrill=true, defaultDrilled=defaultDrilled, defaultActiveFilters=[{property=property, defaultValues={endDate=null, startDate={value=value}}, type=date}, {property=property, defaultValues={endDate=null, startDate={value=value}}, type=date}], variables=[{variables=[{minValue=0.8008281904610115, maxValue=6.027456183070403, defaultValue=1.4658129805029452, name=name, format={symbol=symbol, type=number, fraction=0}, title=title}, {minValue=0.8008281904610115, maxValue=6.027456183070403, defaultValue=1.4658129805029452, name=name, format={symbol=symbol, type=number, fraction=0}, title=title}], type=type, title=title}, {variables=[{minValue=0.8008281904610115, maxValue=6.027456183070403, defaultValue=1.4658129805029452, name=name, format={symbol=symbol, type=number, fraction=0}, title=title}, {minValue=0.8008281904610115, maxValue=6.027456183070403, defaultValue=1.4658129805029452, name=name, format={symbol=symbol, type=number, fraction=0}, title=title}], type=type, title=title}], defaultSelected={coordinates=[{lng=6.027456183070403, lat=0.8008281904610115}, {lng=6.027456183070403, lat=0.8008281904610115}], ids=[, ], dataset=dataset}, markerSelector=markerSelector, mapContextMenu={items=[{type=googleSatellite}, {type=googleSatellite}]}, spatialQuery={unit=time, amount=1, lng=22.945559638799807, profile=car, geometry={}, lat=34.63682100059455}, markersOnly=true, defaultVisualized=defaultVisualized, fitnessGroups=4, measure={type=line, zones=[{unit=time, amount=1, lng=22.945559638799807, profile=car, geometry={}, lat=34.63682100059455}, {unit=time, amount=1, lng=22.945559638799807, profile=car, geometry={}, lat=34.63682100059455}], points=[{unit=time, amount=1, lng=22.945559638799807, profile=car, geometry={}, lat=34.63682100059455}, {unit=time, amount=1, lng=22.945559638799807, profile=car, geometry={}, lat=34.63682100059455}]}, disableFitness=true}}
                    ],
                links = [
                    None
                    ],
                page = {number=1, size=0, totalPages=6, totalElements=}
            )
        else:
            return ViewPagedModelDTO(
        )
        """

    def testViewPagedModelDTO(self):
        """Test ViewPagedModelDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
