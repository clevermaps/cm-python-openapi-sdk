# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cm_python_openapi_sdk.models.dataset_paged_model_dto import DatasetPagedModelDTO

class TestDatasetPagedModelDTO(unittest.TestCase):
    """DatasetPagedModelDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatasetPagedModelDTO:
        """Test DatasetPagedModelDTO
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatasetPagedModelDTO`
        """
        model = DatasetPagedModelDTO()
        if include_optional:
            return DatasetPagedModelDTO(
                content = [
                    {origin=origin, description=description, type=dataset, title=title, version=2, content=null, ref={visualizations=[{zoom={min=3, optimal=11, max=4, visibleFrom=11}, type=areas}, {zoom={min=3, optimal=11, max=4, visibleFrom=11}, type=areas}], spatialIndex=true, zoom={min=3, optimal=11, max=4, visibleFrom=11}, fullTextIndex=true, type=dwh, geometryTable=geometryTable, h3Geometries=[h3Geometries, h3Geometries], subtype=geometryPolygon, geometry=geometry, table=table, categorizable=true, properties=[{filterable=true, name=name, column=column, description=description, title=title, type=type, calculated=true, displayOptions={valueOptions=[{hexColor=hexColor, color=purple, pattern=solid, weight=5.637376656633329, value=}, {hexColor=hexColor, color=purple, pattern=solid, weight=5.637376656633329, value=}]}}, {filterable=true, name=name, column=column, description=description, title=title, type=type, calculated=true, displayOptions={valueOptions=[{hexColor=hexColor, color=purple, pattern=solid, weight=5.637376656633329, value=}, {hexColor=hexColor, color=purple, pattern=solid, weight=5.637376656633329, value=}]}}], primaryKey=primaryKey}, name=name, links=[{}, {}], id=id, page={number=1, size=0, totalPages=6, totalElements=}, accessInfo={createdAt=createdAt, createdBy=createdBy, modifiedAt=modifiedAt, modifiedBy=modifiedBy}, dataSources=[{licenceHolderLogo=https://openapi-generator.tech, licenceUrl=https://openapi-generator.tech, licenceHolder=licenceHolder, licenceHolderUrl=https://openapi-generator.tech}, {licenceHolderLogo=https://openapi-generator.tech, licenceUrl=https://openapi-generator.tech, licenceHolder=licenceHolder, licenceHolderUrl=https://openapi-generator.tech}], properties={featureTitle={type=property, value=value}, featureAttributes=[{layout=primary, format={symbol=symbol, type=text, fraction=0}, type=property, value=value}, {layout=primary, format={symbol=symbol, type=text, fraction=0}, type=property, value=value}], featureSubtitle=null}}
                    ],
                links = [
                    None
                    ],
                page = {number=1, size=0, totalPages=6, totalElements=}
            )
        else:
            return DatasetPagedModelDTO(
        )
        """

    def testDatasetPagedModelDTO(self):
        """Test DatasetPagedModelDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
