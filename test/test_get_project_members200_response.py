# coding: utf-8

"""
    clevermaps-client

    CleverMaps REST API provides access to location intelligence and geospatial analytics platform.  ### Main capabilities include: - Project and user access management - Multidimensional data model and metrics management - Data upload and exports - Ad-hoc analysis of geospatial data - Full text and geographic search - Configuration of CleverMaps Studio visualizations 

    The version of the OpenAPI document: 1.0.0
    Contact: support@clevermaps.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cm_python_openapi_sdk.models.get_project_members200_response import GetProjectMembers200Response

class TestGetProjectMembers200Response(unittest.TestCase):
    """GetProjectMembers200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetProjectMembers200Response:
        """Test GetProjectMembers200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetProjectMembers200Response`
        """
        model = GetProjectMembers200Response()
        if include_optional:
            return GetProjectMembers200Response(
                links = [
                    None
                    ],
                content = [
                    {accountId=accountId, createdAt=createdAt, role=ANONYMOUS, modifiedAt=modifiedAt, links=[{}, {}], id=id, account={preferences={sendNewsletter=true, lastActiveOrganization=lastActiveOrganization, language=language, lastActiveProject=lastActiveProject}, phoneNumber=phoneNumber, requireAdditionalAttributes=true, fullName=fullName, anonymous=true, onboarding={introShown=[introShown, introShown], tipsShown=[tipsShown, tipsShown]}, links=[{}, {}], id=id, consentGranted=true, jobInfo={companyName=companyName, industry=industry, jobPosition=jobPosition}, email=email, status=ENABLED}, status=ENABLED}
                    ],
                page = {number=1, size=0, totalPages=6, totalElements=},
                id = '',
                account_id = '',
                status = 'ENABLED',
                role = 'ANONYMOUS',
                created_at = '',
                modified_at = '',
                account = {preferences={sendNewsletter=true, lastActiveOrganization=lastActiveOrganization, language=language, lastActiveProject=lastActiveProject}, phoneNumber=phoneNumber, requireAdditionalAttributes=true, fullName=fullName, anonymous=true, onboarding={introShown=[introShown, introShown], tipsShown=[tipsShown, tipsShown]}, links=[{}, {}], id=id, consentGranted=true, jobInfo={companyName=companyName, industry=industry, jobPosition=jobPosition}, email=email, status=ENABLED}
            )
        else:
            return GetProjectMembers200Response(
                status = 'ENABLED',
                role = 'ANONYMOUS',
        )
        """

    def testGetProjectMembers200Response(self):
        """Test GetProjectMembers200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
